runApp('myapp1')
runApp('myapp1')
runApp('myapp1')
runApp('myapp1')
runApp('myapp1')
runApp('myapp1')
install.package('seqinr')
install.package('seqinr')
install.packages('seqinr')
shiny::runApp('myapp1')
countries <- readRDS("myapp1/data/census.rds")
countries <- readRDS("myapp1/data/countries.rds")
countries <- readRDS("data/countries.rds")
countries <- readRDS("data/countries.rds")
countries <- readRDS("data/countries.rds")
runApp('myapp1')
runApp('myapp1')
runApp('myapp1')
counties <- readRDS("data/counties.rds")
runApp('myapp2')
runApp('myapp2')
install.packages(c("maps", "mapproj"))
setwd("~/")
library(maps)
library(mapproj)
source("myapp2/helpers.R")
counties <- readRDS("myapp2/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
runApp('myapp2')
f1 <- system.file("extdata", "someORF.fa", package="Biostrings")
library(shiny)
library(seqinr)
library(Rcpp)
loadScript <- function()
{
fresa <- read.fasta("example.fasta") #read and store file
fresaSeq <- fresa[[1]] #store elements in vector
nucleotides <- length(fresaSeq) # get number of characters (nucleotides)
cols <- 80 #NEEDS FIXIN (count be less than 80)
rows <- nucleotides/cols #get number of rows in the file
#NEEDS FIXIN (If a double, then extra row not complete of nucleotides)
fresaGenome <- matrix(c(fresaSeq), rows, cols) #store data in a matrix
#Determine the codons within the data file (all possible combinations)
checkCodons <- count(lop, 3)
#if more then 1 codon present in file
if(which(check >= 1) == TRUE)
{
#in progress
}
}
install.packages("seqinr")
library(shiny)
library(seqinr)
library(Rcpp)
loadScript <- function()
{
fresa <- read.fasta("example.fasta") #read and store file
fresaSeq <- fresa[[1]] #store elements in vector
nucleotides <- length(fresaSeq) # get number of characters (nucleotides)
cols <- 80 #NEEDS FIXIN (count be less than 80)
rows <- nucleotides/cols #get number of rows in the file
#NEEDS FIXIN (If a double, then extra row not complete of nucleotides)
fresaGenome <- matrix(c(fresaSeq), rows, cols) #store data in a matrix
#Determine the codons within the data file (all possible combinations)
checkCodons <- count(lop, 3)
#if more then 1 codon present in file
if(which(check >= 1) == TRUE)
{
#in progress
}
}
shiny::runApp('GUI code/main')
install.packages("markdown")
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
install.packages("RMySQL")
dbListTables(mydb)
dbListTables(mydb)
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(), user='bjolivarez', password='insertpassword', dbname='recipes', host='localhost')
dbListTables(mydb)
shiny::runApp('GUI code/main')
library(RMySQL)
mydb = dbConnect(MySQL(), user='bjolivarez', password='insertpassword', dbname='recipes', host='localhost')
dbListTables(mydb)
rs = dbSendQuery(mydb, "SELECT * FROM `ingredients` ORDER BY `id` ASC;")
data = fetch(rs, n = 20)
dbHasCompleted(rs)
dbClearResult(rs)
dbDisconnect(mydb)
data
mydb = dbConnect(MySQL(), user='bjolivarez', password='insertpassword', dbname='recipes', host='localhost')
on.exit(dbDisconnect(mydb))
kat = "ketchup"
dbListTables(mydb)
sql = sprintf("insert into ingredients (newIngredient) values (%s, NOW());", kat)
rs = dbSendQuery(mydb, sql)
data = fetch(rs, n = 20)
dbClearResult(rs)
mydb = dbConnect(MySQL(), user='bjolivarez', password='insertpassword', dbname='recipes', host='localhost')
on.exit(dbDisconnect(mydb))
dbListTables(mydb)
sql = sprintf("insert into ingredients (newIngredient) values (%s, NOW());", kat)
rs = dbSendQuery(mydb, sql)
data = fetch(rs, n = 20)
dbClearResult(rs)
sql = sprintf("insert into ingredients (newIngredient) values ('%s', NOW());", kat)
rs = dbSendQuery(mydb, sql)
sql = sprintf("insert into ingredients (id, name) values ('%d', '%s', NOW());", 13, kat)
rs = dbSendQuery(mydb, sql)
sql = sprintf("insert into ingredients (id, name) values (%d, '%s', NOW());", 13, kat)
rs = dbSendQuery(mydb, sql)
sql = sprintf("INSERT INTO `recipes`.`ingredients` (`id`, `name`) VALUES (NULL, '%s');", kat)
rs = dbSendQuery(mydb, sql)
data = fetch(rs, n = 20)
data = fetch(rs)
dbClearResult(rs)
id <- dbGetQuery(con, "select last_insert_id();")[1,1]
id <- dbGetQuery(mydb, "select last_insert_id();")[1,1]
id
rs = dbSendQuery(mydb, "SELECT * FROM ingredients;")
data = fetch(rs, n = 20)
data
rs = dbSendQuery(mydb, "SELECT * FROM ingredients order by id ASC;")
data = fetch(rs, n = 20)
dbClearResult(rs)
data
shiny::runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
shiny::runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
library(Rcpp)
sourceCpp('fun.cpp')
sourceCpp('C++Example/fun.cpp')
timesTwo(42)
readingFile()
library(Rcpp)
sourceCpp('C++Example/fun.cpp')
readingFile()
library(Rcpp)
sourceCpp('C++Example/fun.cpp')
readingFile()
Rcpp::sourceCpp('C++Example/fun.cpp')
Rcpp::sourceCpp('C++Example/fun.cpp')
library(Rcpp)
sourceCpp('C++Example/fun.cpp')
library(Rcpp)
sourceCpp('C++Example/fun.cpp')
readingFile()
source('~/C++Example/cppSamp.R')
library(Rcpp)
sourceCpp('C++Example/fun.cpp')
readingFile()
library(Rcpp)
sourceCpp('C++Example/fun.cpp')
readingFile()
library(Rcpp)
sourceCpp('C++Example/fun.cpp')
readingFile(3)
readingFile(3)
library(Rcpp)
sourceCpp('fun.cpp')
readingFile(3)
library(Rcpp)
sourceCpp('fun.cpp')
readingFile(3)
library(Rcpp)
sourceCpp('/C++Example/fun.cpp')
readingFile(3)
sourceCpp('../fun.cpp')
sourceCpp('fun.cpp')
readingFile(3)
sourceCpp('fun.cpp')
Rcpp::sourceCpp('fun.cpp')
Rcpp::sourceCpp('fun.cpp')
timesTwo(42)
readingFile(3)
shiny::runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
Rcpp::sourceCpp('C:/Users/bolivarez9193/Desktop/example.cpp')
Rcpp::sourceCpp('C:/Users/bolivarez9193/Desktop/example.cpp')
Rcpp::sourceCpp('C:/Users/bolivarez9193/Desktop/example.cpp')
Rcpp::sourceCpp('fun.cpp')
readingFile(3)
Rcpp::sourceCpp('fun.cpp')
readingFile(3)
Rcpp::sourceCpp('fun.cpp')
readingFile(3)
Rcpp::sourceCpp('fun.cpp')
readingFile(3)
Rcpp::sourceCpp('fun.cpp')
readingFile(3)
library(Rcpp)
sourceCpp('fun.cpp')
readingFile(3)
readingFile(3)
sourceCpp('fun.cpp')
readingFile(3)
sourceCpp('fun.cpp')
readingFile(3)
sourceCpp('fun.cpp')
readingFile(3)
library(Rcpp)
sourceCpp('fun.cpp')
readingFile(3)
library(RMySQL)
showMethods(dbConnect)
shiny::runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
shiny::runApp('GUI code/main')
runApp('GUI code/main')
shiny::runApp('GUI code/main')
runApp('GUI code/main')
runApp('GUI code/main')
shiny::runApp('GUI code/main')
shiny::runApp('GUI code/newAccount')
shiny::runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
library(RMySQL)
#This will connect to the database. user is your user name, password is password, dbname is the name of the
#database that you are trying to connect to, for host just leave it as 'localhost', the on.exit is for
#what to do when you want to disconnect.
mydb = dbConnect(MySQL(), user='bjolivarez', password='insertpassword', dbname='recipes', host='localhost')
on.exit(dbDisconnect(mydb))
#This is just a variable that provides an example of data to insert into the database.
kat = "mustard"
#This function will show all tables in the database
dbListTables(mydb)
rs = dbSendQuery(mydb, "SELECT * FROM ingredients order by id ASC;")
data = fetch(rs, n = 20)
dbClearResult(rs)
runApp('GUI code/newAccount')
dbListConnections(MySQL())
dbDisconnect(mydb)
dbListConnections(MySQL())
runApp('GUI code/newAccount')
dbListTables(mydb)
mydb = dbConnect(MySQL(), user='bjolivarez', password='insertpassword', dbname='recipes', host='localhost')
on.exit(dbDisconnect(mydb))
dbListTables(mydb)
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
getwd()
runApp('GUI code/home')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
shiny::runApp('Example/app.r')
runApp('Example/app.r')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
shiny::runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
dbListConnections(MySQL())
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
shiny::runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
shiny::runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
shiny::runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
shiny::runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
getwd()
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
shiny::runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/home')
shiny::runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
runApp('GUI code/newAccount')
shiny::runApp('9793754-bf5730758337a6ff10c5b71949b34a74e53707a2')
shiny::runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
runApp('GUI code/home')
shiny::runApp('GUI_Code/newAccount')
library(RMySQL)
#This will connect to the database. user is your user name, password is password, dbname is the name of the
#database that you are trying to connect to, for host just leave it as 'localhost', the on.exit is for
#what to do when you want to disconnect.
mydb = dbConnect(MySQL(), user='bjolivarez', password='insertpassword', dbname='recipes', host='localhost')
on.exit(dbDisconnect(mydb))
dbListTables(mydb)
rs = dbSendQuery(mydb, "SELECT * FROM ingredients order by id ASC;")
data = fetch(rs, n = 20)
data
dbClearResult(rs)
rs = dbSendQuery(mydb, "SELECT * FROM ingredients where id = 20 order by id ASC;")
data = fetch(rs, n = 20)
data
dbClearResult(rs)
rs = dbSendQuery(mydb, "SELECT * FROM ingredients where id = 21 order by id ASC;")
data = fetch(rs, n = 20)
data
data.id
data.name
data
if(is.null(data)){1}
if(!is.null(data)){1}
if(data=="[1] id    name\n<0 rows> (or 0-length row.names)"){1}
if(data==""){1}
mydb = dbConnect(MySQL(), user='bjolivarez', password='insertpassword', dbname='recipes', host='localhost')
on.exit(dbDisconnect(mydb))
dbListTables(mydb)
rs = dbSendQuery(mydb, "SELECT * FROM ingredients where id = 20 order by id ASC;")
data = fetch(rs, n = 20)
dim(data)
data
View(data)
data[1]
data[2]
if(data[2]=="Olivarez"){1}
if(data[2]!="Olivarez"){1}
if(data[2]!="Olivares"){1}
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
mydb = dbConnect(MySQL(), user='bjolivarez', password='insertpassword', dbname='recipes', host='localhost')
on.exit(dbDisconnect(mydb))
dbListTables(mydb)
rs = dbSendQuery(mydb, "SELECT * FROM ingredients where id = 21 order by id ASC;")
data = fetch(rs, n = 20)
data
if(data[2]!="Olivarez"){1}
nrow(data)
if(nrow(data) == 0){1}
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
View(data)
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
library(RMySQL)
mydb = dbConnect(MySQL(), user='bjolivarez', password='insertpassword', dbname='recipes', host='localhost')
on.exit(dbDisconnect(mydb))
dbListTables(mydb)
rs = dbSendQuery(mydb, "SELECT * FROM ingredients where name = olivarez order by id ASC;")
rs = dbSendQuery(mydb, "SELECT * FROM ingredients where name = \"olivarez\" order by id ASC;")
data = fetch(rs, n = 20)
data
shiny::runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
strtoi(charToRaw("abcd"),16L)
array =  strtoi(charToRaw("abcd"),16L)
shiny::runApp('GUI_Code/main')
runApp('GUI_Code/main')
shiny::runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
runApp('GUI_Code/newAccount')
source('GUI_Code/newAccount/openPage.R')
source('newAccount/openPage.R')
runApp('newAccount')
runApp('newAccount')
runApp('newAccount')
runApp('newAccount')
source('newAccount/www/newApp.R')
source('newAccount/www/newApp.R')
source('newAccount/www/newApp.R')
runApp('newAccount')
